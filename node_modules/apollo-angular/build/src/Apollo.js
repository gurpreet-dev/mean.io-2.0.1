var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { Inject, Injectable } from '@angular/core';
import { rxify } from 'apollo-client-rxjs';
import { ApolloClient, } from 'apollo-client';
import { from } from 'rxjs/observable/from';
import { ApolloQueryObservable } from './ApolloQueryObservable';
import { CLIENT_MAP, CLIENT_MAP_WRAPPER } from './tokens';
import { wrapWithZone, fromPromise } from './utils';
/**
 * Base class that handles ApolloClient
 */
var ApolloBase = (function () {
    function ApolloBase(client) {
        this.client = client;
    }
    ApolloBase.prototype.watchQuery = function (options) {
        return new ApolloQueryObservable(rxify(this.client.watchQuery)(options));
    };
    ApolloBase.prototype.query = function (options) {
        var _this = this;
        return wrapWithZone(fromPromise(function () { return _this.client.query(__assign({}, options)); }));
    };
    ApolloBase.prototype.mutate = function (options) {
        var _this = this;
        return wrapWithZone(fromPromise(function () { return _this.client.mutate(__assign({}, options)); }));
    };
    ApolloBase.prototype.subscribe = function (options) {
        return wrapWithZone(from(this.client.subscribe(options)));
    };
    ApolloBase.prototype.getClient = function () {
        return this.client;
    };
    ApolloBase.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ApolloBase.ctorParameters = function () { return [
        { type: ApolloClient, },
    ]; };
    return ApolloBase;
}());
export { ApolloBase };
/**
 * Container service that works just like the ApolloBase but includes named ApolloClients
 */
var Apollo = (function (_super) {
    __extends(Apollo, _super);
    function Apollo(clientMap) {
        var _this = _super.call(this, clientMap['default']) || this;
        // XXX: We assume user has a polyfill for Map (just like Angular does)
        _this.map = new Map();
        for (var name_1 in clientMap) {
            if (typeof name_1 === 'string' && name_1 !== 'default') {
                _this.map.set(name_1, new ApolloBase(clientMap[name_1]));
            }
        }
        return _this;
    }
    Apollo.prototype.default = function () {
        return this;
    };
    Apollo.prototype.use = function (name) {
        if (name === 'default') {
            return this.default();
        }
        return this.map.get(name);
    };
    Apollo.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Apollo.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [CLIENT_MAP,] },] },
    ]; };
    return Apollo;
}(ApolloBase));
export { Apollo };
/**
 * Invokes a ClientMapWrapper
 */
export function getClientMap(configWrapper) {
    var config = configWrapper();
    if (config instanceof ApolloClient) {
        return { default: config };
    }
    return config;
}
/**
 * Provides a value for a map and a wrapper
 */
export function provideClientMap(configWrapper) {
    return [{
            provide: CLIENT_MAP_WRAPPER,
            useValue: configWrapper,
        }, {
            provide: CLIENT_MAP,
            useFactory: getClientMap,
            deps: [CLIENT_MAP_WRAPPER],
        }];
}
/**
 * Provides the Apollo service
 */
export var provideApollo = {
    provide: Apollo,
    useFactory: createApollo,
    deps: [CLIENT_MAP],
};
export function createApollo(clientMap) {
    return new Apollo(clientMap);
}
//# sourceMappingURL=Apollo.js.map