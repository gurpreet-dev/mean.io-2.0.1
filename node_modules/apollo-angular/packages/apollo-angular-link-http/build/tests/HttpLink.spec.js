import { setupAngular } from './_setup';
import gql from 'graphql-tag';
import { TestBed, inject, async } from '@angular/core/testing';
import { HttpClientModule, HttpHeaders } from '@angular/common/http';
import { HttpClientTestingModule, HttpTestingController, } from '@angular/common/http/testing';
import { execute } from 'apollo-link';
import { HttpLink } from '../src/HttpLink';
describe('HttpLink', function () {
    beforeAll(function () { return setupAngular(); });
    beforeEach(function () {
        TestBed.configureTestingModule({
            imports: [HttpClientModule, HttpClientTestingModule],
            providers: [HttpLink],
        });
    });
    afterEach(inject([HttpTestingController], function (backend) {
        backend.verify();
    }));
    test('should use HttpClient', async(inject([HttpLink, HttpTestingController], function (httpLink, httpBackend) {
        var link = httpLink.create({ uri: 'graphql' });
        var op = {
            query: (_a = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], _a.raw = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], gql(_a)),
            operationName: 'heroes',
            variables: {},
        };
        var data = {
            heroes: [{ name: 'Superman' }],
        };
        execute(link, op).subscribe({
            next: function (result) { return expect(result).toEqual({ data: data }); },
            error: function () {
                throw new Error('Should not be here');
            },
        });
        httpBackend.expectOne('graphql').flush({ data: data });
        var _a;
    })));
    test('should send it as JSON with right body and headers', async(inject([HttpLink, HttpTestingController], function (httpLink, httpBackend) {
        var link = httpLink.create({ uri: 'graphql' });
        var op = {
            query: (_a = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], _a.raw = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], gql(_a)),
            operationName: 'heroes',
            variables: {},
        };
        execute(link, op).subscribe(function () {
            //
        });
        httpBackend.match(function (req) {
            expect(req.body.operationName).toBe(op.operationName);
            expect(req.reportProgress).toBe(false);
            expect(req.responseType).toBe('json');
            expect(req.detectContentTypeHeader()).toBe('application/json');
            return true;
        });
        var _a;
    })));
    test('should include extensions if allowed', async(inject([HttpLink, HttpTestingController], function (httpLink, httpBackend) {
        var link = httpLink.create({
            uri: 'graphql',
            includeExtensions: true,
        });
        var op = {
            query: (_a = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], _a.raw = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], gql(_a)),
            extensions: {
                fooExt: true,
            },
        };
        execute(link, op).subscribe(function () {
            //
        });
        httpBackend.match(function (req) {
            expect(req.body.extensions.fooExt).toBe(true);
            return true;
        });
        var _a;
    })));
    test('should not include extensions if not allowed', async(inject([HttpLink, HttpTestingController], function (httpLink, httpBackend) {
        var link = httpLink.create({
            uri: 'graphql',
            includeExtensions: false,
        });
        var op = {
            query: (_a = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], _a.raw = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], gql(_a)),
            extensions: {
                fooExt: true,
            },
        };
        execute(link, op).subscribe(function () {
            //
        });
        httpBackend.match(function (req) {
            expect(req.body.extensions).toBeUndefined();
            return true;
        });
        var _a;
    })));
    test('should support withCredentials', async(inject([HttpLink, HttpTestingController], function (httpLink, httpBackend) {
        var link = httpLink.create({
            uri: 'graphql',
            withCredentials: true,
        });
        var op = {
            query: (_a = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], _a.raw = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], gql(_a)),
        };
        execute(link, op).subscribe(function () {
            //
        });
        httpBackend.match(function (req) {
            expect(req.withCredentials).toBe(true);
            return true;
        });
        var _a;
    })));
    test('should support headers from contructor options', async(inject([HttpLink, HttpTestingController], function (httpLink, httpBackend) {
        var link = httpLink.create({
            uri: 'graphql',
            headers: new HttpHeaders().set('X-Custom-Header', 'foo'),
        });
        var op = {
            query: (_a = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], _a.raw = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], gql(_a)),
        };
        execute(link, op).subscribe(function () {
            //
        });
        httpBackend.match(function (req) {
            expect(req.headers.get('X-Custom-Header')).toBe('foo');
            return true;
        });
        var _a;
    })));
    test('should support headers from context', async(inject([HttpLink, HttpTestingController], function (httpLink, httpBackend) {
        var link = httpLink.create({
            uri: 'graphql',
        });
        var op = {
            query: (_a = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], _a.raw = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], gql(_a)),
            context: {
                headers: new HttpHeaders().set('X-Custom-Header', 'foo'),
            },
        };
        execute(link, op).subscribe(function () {
            //
        });
        httpBackend.match(function (req) {
            expect(req.headers.get('X-Custom-Header')).toBe('foo');
            return true;
        });
        var _a;
    })));
    test('should merge headers from context and contructor options', async(inject([HttpLink, HttpTestingController], function (httpLink, httpBackend) {
        var link = httpLink.create({
            uri: 'graphql',
            headers: new HttpHeaders().set('X-Custom-Foo', 'foo'),
        });
        var op = {
            query: (_a = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], _a.raw = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], gql(_a)),
            context: {
                headers: new HttpHeaders().set('X-Custom-Bar', 'bar'),
            },
        };
        execute(link, op).subscribe(function () {
            //
        });
        httpBackend.match(function (req) {
            expect(req.headers.get('X-Custom-Foo')).toBe('foo');
            expect(req.headers.get('X-Custom-Bar')).toBe('bar');
            return true;
        });
        var _a;
    })));
    test('should prioritize context', async(inject([HttpLink, HttpTestingController], function (httpLink, httpBackend) {
        var link = httpLink.create({
            uri: 'graphql',
            withCredentials: true,
            headers: new HttpHeaders().set('X-Custom-Header', 'foo'),
        });
        var op = {
            query: (_a = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], _a.raw = ["\n              query heroes {\n                heroes {\n                  name\n                }\n              }\n            "], gql(_a)),
            context: {
                withCredentials: false,
                headers: new HttpHeaders().set('X-Custom-Header', 'bar'),
            },
        };
        execute(link, op).subscribe(function () {
            //
        });
        httpBackend.match(function (req) {
            expect(req.withCredentials).toBe(false);
            expect(req.headers.get('X-Custom-Header')).toBe('bar');
            return true;
        });
        var _a;
    })));
});
//# sourceMappingURL=HttpLink.spec.js.map