import './_setup';
import { NgModule, Component, destroyPlatform, getPlatform, ApplicationRef, CompilerFactory, } from '@angular/core';
import { ServerModule, renderModule, renderModuleFactory, INITIAL_CONFIG, PlatformState, platformDynamicServer, } from '@angular/platform-server';
import { async } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController, } from '@angular/common/http/testing';
import { BrowserModule } from '@angular/platform-browser';
import { execute } from 'apollo-link';
import { filter } from 'rxjs/operator/filter';
import { first } from 'rxjs/operator/first';
import { toPromise } from 'rxjs/operator/toPromise';
import gql from 'graphql-tag';
import { HttpLink } from '../src/HttpLink';
describe('integration', function () {
    beforeEach(function () {
        if (getPlatform()) {
            destroyPlatform();
        }
    });
    describe('render', function () {
        var doc;
        var called;
        // Mock GraphQL endpoint
        var query = (_a = ["\n      query websiteInfo {\n        website {\n          status\n        }\n      }\n    "], _a.raw = ["\n      query websiteInfo {\n        website {\n          status\n        }\n      }\n    "], gql(_a));
        var data = {
            website: {
                status: 'online',
            },
        };
        var AsyncServerApp = /** @class */ (function () {
            function AsyncServerApp(httpLink, httpBackend) {
                this.httpLink = httpLink;
                this.httpBackend = httpBackend;
                this.text = '';
            }
            AsyncServerApp.prototype.ngOnInit = function () {
                var _this = this;
                execute(this.httpLink.create({ uri: 'graphql' }), {
                    query: query,
                }).subscribe(function (result) {
                    _this.text = result.data.website.status;
                });
                this.httpBackend.expectOne('graphql').flush({ data: data });
            };
            AsyncServerApp.decorators = [
                { type: Component, args: [{
                            selector: 'app',
                            template: 'Website: {{text}}',
                        },] },
            ];
            /** @nocollapse */
            AsyncServerApp.ctorParameters = function () { return [
                { type: HttpLink, },
                { type: HttpTestingController, },
            ]; };
            return AsyncServerApp;
        }());
        var AsyncServerModule = /** @class */ (function () {
            function AsyncServerModule() {
            }
            AsyncServerModule.decorators = [
                { type: NgModule, args: [{
                            declarations: [AsyncServerApp],
                            imports: [
                                BrowserModule.withServerTransition({ appId: 'async-server' }),
                                ServerModule,
                                HttpClientTestingModule,
                            ],
                            providers: [HttpLink],
                            bootstrap: [AsyncServerApp],
                        },] },
            ];
            /** @nocollapse */
            AsyncServerModule.ctorParameters = function () { return []; };
            return AsyncServerModule;
        }());
        beforeEach(function () {
            doc = '<html><head></head><body><app></app></body></html>';
            called = false;
        });
        afterEach(function () {
            expect(called).toBe(true);
        });
        test('using long form should work', async(function () {
            var platform = platformDynamicServer([
                {
                    provide: INITIAL_CONFIG,
                    useValue: {
                        document: doc,
                    },
                },
            ]);
            platform
                .bootstrapModule(AsyncServerModule)
                .then(function (moduleRef) {
                var applicationRef = moduleRef.injector.get(ApplicationRef);
                return toPromise.call(first.call(filter.call(applicationRef.isStable, function (isStable) { return isStable; })));
            })
                .then(function () {
                var str = platform.injector.get(PlatformState).renderToString();
                expect(clearNgVersion(str)).toMatchSnapshot();
                platform.destroy();
                called = true;
            });
        }));
        test('using renderModule should work', async(function () {
            renderModule(AsyncServerModule, { document: doc }).then(function (output) {
                expect(clearNgVersion(output)).toMatchSnapshot();
                called = true;
            });
        }));
        test('using renderModuleFactory should work', async(function () {
            var platform = platformDynamicServer([
                {
                    provide: INITIAL_CONFIG,
                    useValue: {
                        document: doc,
                    },
                },
            ]);
            var compilerFactory = platform.injector.get(CompilerFactory, null);
            var moduleFactory = compilerFactory
                .createCompiler()
                .compileModuleSync(AsyncServerModule);
            renderModuleFactory(moduleFactory, { document: doc }).then(function (output) {
                expect(clearNgVersion(output)).toMatchSnapshot();
                called = true;
            });
        }));
        var _a;
    });
});
function clearNgVersion(html) {
    return html.replace(/ng-version=\"[^"]+\"/, '');
}
//# sourceMappingURL=SSR.spec.js.map