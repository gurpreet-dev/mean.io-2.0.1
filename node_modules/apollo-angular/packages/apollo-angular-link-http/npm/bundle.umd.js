(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('apollo-link'), require('graphql/language/printer')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common/http', 'apollo-link', 'graphql/language/printer'], factory) :
	(factory((global.apollo = global.apollo || {}, global.apollo.link = global.apollo.link || {}, global.apollo.link.http = {}),global.ng.core,global.ng.common.http,global.httpLink,global.printer));
}(this, (function (exports,core,http,apolloLink,printer) { 'use strict';

var normalizeUrl = function (url) {
    return url.replace(/^\/|\/$/g, '');
};
var mergeHeaders = function (source, destination) {
    if (source && destination) {
        var merged = destination
            .keys()
            .reduce(function (headers, name) { return headers.set(name, destination.getAll(name)); }, source);
        return merged;
    }
    return destination || source;
};

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
// XXX find a better name for it
var HttpLinkHandler = /** @class */ (function (_super) {
    __extends(HttpLinkHandler, _super);
    function HttpLinkHandler(httpClient, options) {
        var _this = _super.call(this) || this;
        _this.options = options;
        _this.requester = new apolloLink.ApolloLink(function (operation) {
            return new apolloLink.Observable(function (observer) {
                var _a = operation.getContext(), headers = _a.headers, withCredentials = _a.withCredentials;
                var operationName = operation.operationName, variables = operation.variables, query = operation.query, extensions = operation.extensions;
                var body = {
                    operationName: operationName,
                    variables: variables,
                    query: printer.print(query),
                };
                var postOptions = {
                    withCredentials: _this.options.withCredentials,
                    headers: _this.options.headers,
                };
                if (_this.options.includeExtensions) {
                    body.extensions = extensions;
                }
                if (typeof withCredentials !== 'undefined') {
                    postOptions.withCredentials = withCredentials;
                }
                // merge headers
                if (headers) {
                    postOptions.headers = mergeHeaders(postOptions.headers, headers);
                }
                var endpointURI = normalizeUrl(_this.options.uri);
                var defaultURI = 'graphql';
                var obs = httpClient.post(endpointURI || defaultURI, body, __assign({ observe: 'response', responseType: 'json', reportProgress: false }, postOptions));
                var sub = obs.subscribe({
                    next: function (result) {
                        observer.next(result.body);
                    },
                    error: function (err) {
                        observer.error(err);
                    },
                    complete: function () {
                        observer.complete();
                    },
                });
                return function () {
                    if (!sub.closed) {
                        sub.unsubscribe();
                    }
                };
            });
        }).request;
        return _this;
    }
    HttpLinkHandler.prototype.request = function (op) {
        return this.requester(op);
    };
    return HttpLinkHandler;
}(apolloLink.ApolloLink));
var HttpLink = /** @class */ (function () {
    function HttpLink(httpClient) {
        this.httpClient = httpClient;
    }
    HttpLink.prototype.create = function (options) {
        return new HttpLinkHandler(this.httpClient, options);
    };
    HttpLink.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    HttpLink.ctorParameters = function () { return [
        { type: http.HttpClient, },
    ]; };
    return HttpLink;
}());

var PROVIDERS = [HttpLink];
var HttpLinkModule = /** @class */ (function () {
    function HttpLinkModule() {
    }
    HttpLinkModule.decorators = [
        { type: core.NgModule, args: [{
                    providers: PROVIDERS,
                },] },
    ];
    /** @nocollapse */
    HttpLinkModule.ctorParameters = function () { return []; };
    return HttpLinkModule;
}());

exports.HttpLink = HttpLink;
exports.HttpLinkHandler = HttpLinkHandler;
exports.HttpLinkModule = HttpLinkModule;
exports.PROVIDERS = PROVIDERS;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=bundle.umd.js.map
