import { ApolloClient, WatchQueryOptions, MutationOptions, ApolloQueryResult, SubscriptionOptions } from 'apollo-client';
import { FetchResult } from 'apollo-link';
import { Observable } from 'rxjs/Observable';
import { QueryRef } from './QueryRef';
import { ApolloOptions } from './types';
export declare class ApolloBase<TCacheShape> {
    private _client;
    constructor(_client?: ApolloClient<TCacheShape>);
    watchQuery<T>(options: WatchQueryOptions): QueryRef<T>;
    query<T>(options: WatchQueryOptions): Observable<ApolloQueryResult<T>>;
    mutate<T>(options: MutationOptions): Observable<FetchResult<T>>;
    subscribe(options: SubscriptionOptions): Observable<any>;
    getClient(): ApolloClient<TCacheShape>;
    setClient(client: ApolloClient<TCacheShape>): void;
    private readonly client;
    private beforeEach();
    private checkInstance();
}
export declare class Apollo extends ApolloBase<any> {
    private map;
    constructor();
    create<TCacheShape>(options: ApolloOptions, name?: string): void;
    default(): ApolloBase<any>;
    use(name: string): ApolloBase<any>;
    createDefault<TCacheShape>(options: ApolloOptions): void;
    createNamed<TCacheShape>(name: string, options: ApolloOptions): void;
}
