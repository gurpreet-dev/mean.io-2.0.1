import './_setup';
import { map } from 'rxjs/operator/map';
import { InMemoryCache } from 'apollo-cache-inmemory';
import ApolloClient from 'apollo-client';
import gql from 'graphql-tag';
import { QueryRef } from '../src/QueryRef';
import { mockSingleLink } from './mocks/mockLinks';
var createClient = function (link) {
    return new ApolloClient({
        link: link,
        cache: new InMemoryCache(),
    });
};
var heroesOperation = {
    query: (_a = ["\n    query allHeroes {\n      heroes {\n        name\n        __typename\n      }\n    }\n  "], _a.raw = ["\n    query allHeroes {\n      heroes {\n        name\n        __typename\n      }\n    }\n  "], gql(_a)),
    variables: {},
    operationName: 'allHeroes',
};
// tslint:disable:variable-name
var __typename = 'Hero';
var Superman = {
    name: 'Superman',
    __typename: __typename,
};
var Batman = {
    name: 'Batman',
    __typename: __typename,
};
describe('QueryRef', function () {
    var client;
    var obsQuery;
    var queryRef;
    beforeEach(function () {
        var mockedLink = mockSingleLink({
            request: heroesOperation,
            result: { data: { heroes: [Superman] } },
        }, {
            request: heroesOperation,
            result: { data: { heroes: [Superman, Batman] } },
        });
        client = createClient(mockedLink);
        obsQuery = client.watchQuery(heroesOperation);
        queryRef = new QueryRef(obsQuery);
    });
    test('should listen to changes', function (done) {
        queryRef.valueChanges.subscribe({
            next: function (result) {
                expect(result.data).toBeDefined();
                done();
            },
            error: function (e) {
                done.fail(e);
            },
        });
    });
    test('should be able to call refetch', function () {
        var mockCallback = jest.fn();
        obsQuery.refetch = mockCallback;
        queryRef.refetch();
        expect(mockCallback.mock.calls.length).toBe(1);
    });
    test('should be able refetch and receive new results', function (done) {
        var calls = 0;
        queryRef.valueChanges.subscribe({
            next: function (result) {
                calls++;
                expect(result.data).toBeDefined();
                if (calls === 2) {
                    done();
                }
            },
            error: function (e) {
                done.fail(e);
            },
            complete: function () {
                done.fail('Should not be here');
            },
        });
        setTimeout(function () {
            queryRef.refetch();
        }, 200);
    });
    test('should be able refetch and receive new results after using rxjs operator', function (done) {
        var calls = 0;
        var obs = queryRef.valueChanges;
        map.call(obs, function (result) { return result.data; }).subscribe({
            next: function (result) {
                calls++;
                if (calls === 1) {
                    expect(result.heroes.length).toBe(1);
                }
                else if (calls === 2) {
                    expect(result.heroes.length).toBe(2);
                    done();
                }
            },
            error: function (e) {
                done.fail(e);
            },
            complete: function () {
                done.fail('Should not be here');
            },
        });
        setTimeout(function () {
            queryRef.refetch();
        }, 200);
    });
    test('should be able to call updateQuery()', function () {
        var mockCallback = jest.fn();
        var mapFn = function () { return ({}); };
        obsQuery.updateQuery = mockCallback;
        queryRef.updateQuery(mapFn);
        expect(mockCallback.mock.calls.length).toBe(1);
        expect(mockCallback.mock.calls[0][0]).toBe(mapFn);
    });
    test('should be able to call result()', function () {
        var mockCallback = jest.fn();
        obsQuery.result = mockCallback.mockReturnValue('expected');
        var result = queryRef.result();
        expect(result).toBe('expected');
        expect(mockCallback.mock.calls.length).toBe(1);
    });
    test('should be able to call currentResult()', function () {
        var mockCallback = jest.fn();
        obsQuery.currentResult = mockCallback.mockReturnValue('expected');
        var result = queryRef.currentResult();
        expect(result).toBe('expected');
        expect(mockCallback.mock.calls.length).toBe(1);
    });
    test('should be able to call getLastResult()', function () {
        var mockCallback = jest.fn();
        obsQuery.getLastResult = mockCallback.mockReturnValue('expected');
        var result = queryRef.getLastResult();
        expect(result).toBe('expected');
        expect(mockCallback.mock.calls.length).toBe(1);
    });
    test('should be able to call getLastError()', function () {
        var mockCallback = jest.fn();
        obsQuery.getLastError = mockCallback.mockReturnValue('expected');
        var result = queryRef.getLastError();
        expect(result).toBe('expected');
        expect(mockCallback.mock.calls.length).toBe(1);
    });
    test('should be able to call resetLastResults()', function () {
        var mockCallback = jest.fn();
        obsQuery.resetLastResults = mockCallback.mockReturnValue('expected');
        var result = queryRef.resetLastResults();
        expect(result).toBe('expected');
        expect(mockCallback.mock.calls.length).toBe(1);
    });
    test('should be able to call fetchMore()', function () {
        var mockCallback = jest.fn();
        var opts = { foo: 1 };
        obsQuery.fetchMore = mockCallback.mockReturnValue('expected');
        var result = queryRef.fetchMore(opts);
        expect(result).toBe('expected');
        expect(mockCallback.mock.calls.length).toBe(1);
        expect(mockCallback.mock.calls[0][0]).toBe(opts);
    });
    test('should be able to call subscribeToMore()', function () {
        var mockCallback = jest.fn();
        var opts = { foo: 1 };
        obsQuery.subscribeToMore = mockCallback;
        queryRef.subscribeToMore(opts);
        expect(mockCallback.mock.calls.length).toBe(1);
        expect(mockCallback.mock.calls[0][0]).toBe(opts);
    });
    test('should be able to call stopPolling()', function () {
        var mockCallback = jest.fn();
        obsQuery.stopPolling = mockCallback;
        queryRef.stopPolling();
        expect(mockCallback.mock.calls.length).toBe(1);
    });
    test('should be able to call startPolling()', function () {
        var mockCallback = jest.fn();
        obsQuery.startPolling = mockCallback;
        queryRef.startPolling(3000);
        expect(mockCallback.mock.calls.length).toBe(1);
        expect(mockCallback.mock.calls[0][0]).toBe(3000);
    });
    test('should be able to call setOptions()', function () {
        var mockCallback = jest.fn();
        var opts = {};
        obsQuery.setOptions = mockCallback.mockReturnValue('expected');
        var result = queryRef.setOptions(opts);
        expect(result).toBe('expected');
        expect(mockCallback.mock.calls.length).toBe(1);
        expect(mockCallback.mock.calls[0][0]).toBe(opts);
    });
    test('should be able to call setVariables()', function () {
        var mockCallback = jest.fn();
        var opts = {};
        obsQuery.setOptions = mockCallback.mockReturnValue('expected');
        var result = queryRef.setOptions(opts);
        expect(result).toBe('expected');
        expect(mockCallback.mock.calls.length).toBe(1);
        expect(mockCallback.mock.calls[0][0]).toBe(opts);
    });
    test('should handle multiple subscribers', function (done) {
        var obsFirst = queryRef.valueChanges;
        var obsSecond = queryRef.valueChanges;
        var calls = {
            first: 0,
            second: 0,
        };
        var subFirst = obsFirst.subscribe({
            next: function (result) {
                calls.first++;
                expect(result.data).toBeDefined();
            },
            error: function (e) {
                done.fail(e);
            },
            complete: function () {
                done.fail('Should not be here');
            },
        });
        var subSecond = obsSecond.subscribe({
            next: function (result) {
                calls.second++;
                expect(result.data).toBeDefined();
                setTimeout(function () {
                    subSecond.unsubscribe();
                    // tslint:disable:no-use-before-declare
                    check();
                });
            },
            error: function (e) {
                done.fail(e);
            },
            complete: function () {
                if (calls.second !== 1) {
                    done.fail('Should be called only after first call');
                }
            },
        });
        var check = function () {
            expect(calls.first).toBe(1);
            expect(calls.second).toBe(1);
            expect(subFirst.closed).toBe(false);
            expect(subSecond.closed).toBe(true);
            done();
        };
    });
});
var _a;
//# sourceMappingURL=QueryRef.spec.js.map